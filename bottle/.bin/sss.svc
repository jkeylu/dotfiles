#!/usr/bin/env bash

KCPTUN="kcptun-server"
SS="ss-server"
DEFAULT_CONFIG_NAME="default"

I_CONFIG_DIR="$HOME/.config/shadowsocks"
I_CACHE_DIR="$HOME/.cache/shadowsocks"
[[ -d $I_CONFIG_DIR ]] || mkdir -p "$I_CONFIG_DIR"
[[ -d $I_CACHE_DIR ]] || mkdir -p "$I_CACHE_DIR"

assert_file_exists() {
  if [[ ! -f $1 ]]; then
    echo "file not exists: $1" 1>&2
    exit 1
  fi
}

assert_not_empty() {
  local value=$1
  local name=$2
  if [[ -z $value ]]; then
    echo "\"$name\" is empty" 1>&2
    exit 1
  fi
}

config_get() {
  local key=$1
  echo $(echo "$CONF" | sed -n 's/.*"'$key'": *"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/p')
}

format_name() {
  local name=$1
  local cfg=$2

  if [[ -z $cfg || $cfg = $DEFAULT_CONFIG_NAME ]]; then
    echo "$name"
  else
    echo "$cfg.$name"
  fi
}

load_config() {
  CONFIG_NAME=$DEFAULT_CONFIG_NAME
  if [[ -n $1 ]]; then
    CONFIG_NAME=$1
  fi

  local cfg=$CONFIG_NAME
  local config_file="$I_CONFIG_DIR/$(format_name "config.json" "$cfg")"
  assert_file_exists "$config_file"

  CONF=`cat "$config_file"`

  SS_SERVER_HOST=`config_get server`
  SS_SERVER_PORT=`config_get server_port`
  LOCAL_PORT=`config_get local_port`
  PASSWORD=`config_get password`
  METHOD=`config_get method`
  KCPTUN_SERVER_PORT=`config_get kcptun_server_port`
  OVER_KCPTUN=`config_get over_kcptun`

  [[ -z $SS_SERVER_PORT ]] && SS_SERVER_PORT="34499"
  [[ -z $LOCAL_PORT ]] && LOCAL_PORT="1080"
  [[ -z $METHOD ]] && METHOD="rc4-md5"
  [[ -z $KCPTUN_SERVER_PORT ]] && KCPTUN_SERVER_PORT="24499"
  [[ -z $OVER_KCPTUN ]] && OVER_KCPTUN="0"

  KCPTUN_LOG="/dev/null"
  SS_LOG="/dev/null"
  if [[ `config_get log` = "1" ]]; then
    KCPTUN_LOG="$I_CACHE_DIR/$(format_name "$KCPTUN.log" "$cfg")"
    SS_LOG="$I_CACHE_DIR/$(format_name "$SS.log" "$cfg")"
  fi

  assert_not_empty "$PASSWORD" "PASSWORD"
}

get_comm_by_pid() {
  local pid="$1"
  echo -n `ps -p $pid -o comm | sed -n '2p'`
}

start() {
  load_config "$1"

  local cfg=$CONFIG_NAME
  local kcptun_pid_file="$I_CACHE_DIR/$(format_name "$KCPTUN.pid" "$cfg")"
  local ss_pid_file="$I_CACHE_DIR/$(format_name "$SS.pid" "$cfg")"

  echo "start $KCPTUN"
  nohup $KCPTUN -l ":$KCPTUN_SERVER_PORT" \
    -t "127.0.0.1:$SS_SERVER_PORT" \
    --crypt none --mtu 1200 \
    --mode normal --dscp 46 \
    --nocomp &> "$KCPTUN_LOG" &
  echo -n $! > "$kcptun_pid_file"

  echo "start $SS"
  nohup $SS -s 0.0.0.0 -p "$SS_SERVER_PORT" \
    -k "$PASSWORD" -m "$METHOD" -u &> "$SS_LOG" &
  echo -n $! > "$ss_pid_file"
}

kill_process() {
  local comm=$1
  local cfg=$2
  local pid_file="$I_CACHE_DIR/$(format_name "$comm.pid" "$cfg")"

  echo "* try to kill $comm"
  if [[ -f $pid_file ]]; then
    local pid=`cat $pid_file`

    if [[ -n $pid ]]; then
      if [[ `get_comm_by_pid $pid` = $comm ]]; then
        echo "kill $comm [$pid]"
        kill $pid
        rm -f "$pid_file"
        return 0
      else
        echo "the process of pid [$pid] is not same as \"$comm\""
      fi

    else
      echo "$comm.pid is empty"
    fi

  else
    echo "$comm.pid not found"
  fi
}

stop() {
  local cfg=$1

  kill_process $KCPTUN $cfg
  kill_process $SS $cfg
}

restart() {
  stop "$@"
  start "$@"
}

Y="\033[0;32mo\033[0m"
N="\033[0;31mx\033[0m"

get_status() {
  local comm=$1
  local cfg=$2
  local pid_file="$I_CACHE_DIR/$(format_name "$comm.pid" "$cfg")"

  local status=$N

  if [[ -f $pid_file ]]; then
    local pid=`cat $pid_file`
    if [[ -n $pid  && `get_comm_by_pid $pid` = $comm ]]; then
      status=$Y
    fi
  fi

  echo $status
}

status() {
  echo "== default"
  echo -e "$KCPTUN $(get_status $KCPTUN)"
  echo -e "$SS $(get_status $SS)"
  echo ""

  for cfg in $(ls "$I_CACHE_DIR" | sed -n 's/\([^.]\+\)\..\+\.pid/\1/p' | uniq); do
    echo "== $cfg"
    echo -e "$KCPTUN $(get_status $KCPTUN $cfg)"
    echo -e "$SS $(get_status $SS $cfg)"
    echo ""
  done

  local a=$(ps ax | grep "$KCPTUN\|$SS" | grep -v grep | awk '{print $1}')
  local b=$(awk 'FNR==1{print ""}1' $I_CACHE_DIR/*.pid)
  echo "== not managed"
  for pid in $(sort <(echo "$a") <(echo "$b") <(echo "$b") | uniq -u); do
    ps u -p $pid | tail -1
  done
  echo ""
}

cleanup() {
  if [[ "-f" != $1 ]]; then
    echo "= $KCPTUN process"
    ps ax | grep "$KCPTUN" | grep -v grep | awk '{$2=$3=$4="";print $0}'
    echo ""

    echo "= $SS process"
    ps ax | grep "$SS" | grep -v grep | awk '{$2=$3=$4="";print $0}'
    echo ""

  else
    echo "= killing $KCPTUN process"
    for pid in $(ps ax | grep "$KCPTUN" | grep -v grep | awk '{print $1}'); do
      echo "kill pid [$pid]"
      kill "$pid"
    done

    echo "= killing $SS process"
    for pid in $(ps ax | grep "$SS" | grep -v grep | awk '{print $1}'); do
      echo "kill pid [$pid]"
      kill "$pid"
    done

    echo "= cleaning cache"
    rm -f "$I_CACHE_DIR/*.pid"
    rm -f "$I_CACHE_DIR/*.log"
  fi
}

case "$1" in
  start)
    shift
    start "$@"
    ;;
  stop)
    shift
    stop "$@"
    ;;
  restart)
    shift
    restart "$@"
    ;;
  status)
    status
    ;;
  cleanup)
    shift
    cleanup "$@"
    ;;
  *)
    echo "Usage: $0 {start|stop|status}"
esac

