#!/usr/bin/env bash

KCPTUN="kcptun-server"
SS="ss-server"

cache_dir="$HOME/.cache/shadowsocks"
[[ -d $cache_dir ]] || mkdir "$cache_dir"

config_dir="$HOME/.config/shadowsocks"
config_file="$config_dir/config.json"
conf=`cat "$config_file"`

config_get() {
    local key=$1
    echo $(echo "$conf" | sed -n 's/.*"'$key'": *"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/p')
}

server_host=`config_get server`
server_port=`config_get server_port`
local_port=`config_get local_port`
password=`config_get password`
method=`config_get method`
kcptun_server_port=`config_get kcptun_server_port`
over_kcptun=`config_get over_kcptun`

[[ -z $server_port ]] && server_port="34499"
[[ -z $local_port ]] && local_port="1080"
[[ -z $method ]] && method="rc4-md5"
[[ -z $kcptun_server_port ]] && kcptun_server_port="24499"
[[ -z $over_kcptun ]] && over_kcptun="0"

get_comm_by_pid() {
    local pid="$1"
    echo -n `ps -p $pid -o comm | sed -n '2p'`
}

get_pid_by_comm() {
    local comm="$1"
    echo -n `ps ax | grep $comm | grep -v grep | awk '{ print $1 }'`
}

is_running() {
    local comm="$1"
    local pid_file="$cache_dir/$comm.pid"
    local pid=`cat $pid_file`

    if [[ -n $pid ]]; then
        if [[ `get_comm_by_pid $pid` = $comm ]]; then
            return 0
        fi

        return 2
    fi

    return 1
}

start() {
    echo "start $KCPTUN"
    nohup $KCPTUN -l ":$kcptun_server_port" \
        -t "127.0.0.1:$server_port" \
        --crypt none --mtu 1200 \
        --mode normal --dscp 46 \
        --nocomp &
    echo -n $! > "$cache_dir/$KCPTUN.pid"

    echo "start $SS"
    nohup $SS -s 0.0.0.0 -p "$server_port" \
        -k "$password" -m "$method" -u &
    echo -n $! > "$cache_dir/$SS.pid"
}

kill_process() {
    local comm=$1
    local pid_file="$cache_dir/$comm.pid"

    echo "* try to kill $comm"
    if [[ -f $pid_file ]]; then
        local pid=`cat $pid_file`

        if [[ -n $pid ]]; then

            if [[ `get_comm_by_pid $pid` = $comm ]]; then
                echo "kill $comm [$pid]"
                kill $pid
                return 0
            else
                echo "the process of pid [$pid] is not same as \"$comm\""
            fi

        else
            echo "$comm.pid is empty"
        fi

    else
        echo "$comm.pid not found"
    fi

    local similar=`ps ax | grep $comm | grep -v grep | awk '{$2=$3=$4="";print $0}'`
    if [[ -n $similar ]]; then
        echo the following process of \"$comm\" are similar
        echo $similar
    fi
    echo ""
}

stop() {
    kill_process $KCPTUN
    kill_process $SS
}

Y="\033[0;32mo\033[0m"
N="\033[0;31mx\033[0m"

get_status() {
    local comm=$1
    local pid_file="$cache_dir/$comm.pid"

    local status=$N

    if [[ -f $pid_file ]]; then
        local pid=`cat $pid_file`
        if [[ -n $pid  && `get_comm_by_pid $pid` = $comm ]]; then
            status=$Y
        fi
    fi

    echo $status
}

status() {
    echo -e "$KCPTUN `get_status $KCPTUN`"
    echo -e "$SS `get_status $SS`"
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|status}"
esac

