#!/usr/bin/env bash

KCPTUN="kcptun-client"
SS="ss-local"

_TMP_ARR_=()

CACHE_DIR="$HOME/.cache/shadowsocks"
[[ -d $CACHE_DIR ]] || mkdir "$CACHE_DIR"

CONFIG_DIR="$HOME/.config/shadowsocks"
CONFIG_FILE="$CONFIG_DIR/config.json"
CONF=`cat "$CONFIG_FILE"`

config_get() {
  local key=$1
  echo $(echo "$CONF" | sed -n 's/.*"'$key'": *"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/p')
}

SS_SERVER_HOST=`config_get server`
SS_SERVER_PORT=`config_get server_port`
LOCAL_PORT=`config_get local_port`
PASSWORD=`config_get password`
METHOD=`config_get method`
KCPTUN_SERVER_HOST=`config_get server`
KCPTUN_SERVER_PORT=`config_get kcptun_server_port`
OVER_KCPTUN=`config_get over_kcptun`

[[ -z $SS_SERVER_PORT ]] && SS_SERVER_PORT="34499"
[[ -z $LOCAL_PORT ]] && LOCAL_PORT="1080"
[[ -z $METHOD ]] && METHOD="rc4-md5"
[[ -z $KCPTUN_SERVER_PORT ]] && KCPTUN_SERVER_PORT="24499"
[[ -z $OVER_KCPTUN ]] && OVER_KCPTUN="0"

if [[ $OVER_KCPTUN = "1" ]]; then
  SS_SERVER_HOST="127.0.0.1"
  SS_SERVER_PORT="12948"
fi

KCPTUN_LOG="/dev/null"
SS_LOG="/dev/null"
if [[ `config_get log` = "1" ]]; then
  KCPTUN_LOG="$CACHE_DIR/$KCPTUN.log"
  SS_LOG="$CACHE_DIR/$SS.log"
fi

get_comm_by_pid() {
  local pid="$1"
  echo -n `ps -p $pid -o comm | sed -n '2p'`
}

get_pids_by_comm() {
  local comm="$1"
  _TMP_ARR_=(`ps ax | grep $comm | grep -v grep | awk '{ print $1 }'`)
}

array_contains() {
  local seeking=$1; shift
  local in=1
  for element; do
    if [[ $element == $seeking ]]; then
      in=0
      break
    fi
  done
  return $in
}

is_running() {
  local comm="$1"
  local pid_file="$CACHE_DIR/$comm.pid"

  if [[ -f $pid_file ]]; then
    local pid=`cat $pid_file`

    if [[ -n $pid ]]; then
      if [[ `get_comm_by_pid $pid` = $comm ]]; then
        return 0
      fi

      return 3
    fi

    return 2
  fi

  return 1
}

start() {
  if [[ $# -gt 0 ]]; then
    if [[ $1 = $KCPTUN ]]; then
      [[ `is_running $KCPTUN` ]] && echo "$KCPTUN is already running" && exit 1
      $KCPTUN -l 127.0.0.1:12948 \
        -r "$KCPTUN_SERVER_HOST:$KCPTUN_SERVER_PORT" \
        --crypt none --mtu 1200 \
        --mode normal --dscp 46 \
        --nocomp
      return 0

    elif [[ $1 = $SS ]]; then
      [[ `is_running $SS` ]] && echo "$SS is already running" && exit 1
      $SS -s "$SS_SERVER_HOST" -p "$SS_SERVER_PORT" \
        -k "$PASSWORD" -m "$METHOD" \
        -l "$LOCAL_PORT"
      return 0

    else
      exit 1
    fi
  fi

  if [[ $OVER_KCPTUN = "1" ]]; then
    if [[ `is_running $KCPTUN` ]]; then
      echo "$KCPTUN is already running"

    else
      echo "start $KCPTUN"
      nohup $KCPTUN -l 127.0.0.1:12948 \
        -r "$KCPTUN_SERVER_HOST:$KCPTUN_SERVER_PORT" \
        --crypt none --mtu 1200 \
        --mode normal --dscp 46 \
        --nocomp &> "$KCPTUN_LOG" &
      echo -n $! > "$CACHE_DIR/$KCPTUN.pid"
    fi
  fi

  if [[ `is_running $SS` ]]; then
    echo "$SS is already running"

  else
    echo "start $SS"
    nohup $SS -s "$SS_SERVER_HOST" -p "$SS_SERVER_PORT" \
      -k "$PASSWORD" -m "$METHOD" \
      -l "$LOCAL_PORT" &> "$SS_LOG" &
    echo -n $! > "$CACHE_DIR/$SS.pid"
  fi
}

kill_process() {
  local comm=$1
  local pid_file="$CACHE_DIR/$comm.pid"

  echo "* try to kill $comm"
  if [[ -f $pid_file ]]; then
    local pid=`cat $pid_file`

    if [[ -n $pid ]]; then
      if [[ `get_comm_by_pid $pid` = $comm ]]; then
        echo "kill $comm [$pid]"
        kill $pid
        rm -f "$pid_file"
        return 0
      else
        echo "the process of pid [$pid] is not same as \"$comm\""
      fi

    else
      echo "$comm.pid is empty"
    fi

  else
    echo "$comm.pid not found"
  fi

  local similar=`ps ax | grep $comm | grep -v grep | awk '{$2=$3=$4="";print $0}'`
  if [[ -n $similar ]]; then
    echo the following process of \"$comm\" are similar
    echo $similar
  fi
  echo ""
}

stop() {
  [[ $OVER_KCPTUN = "1" ]] && kill_process $KCPTUN

  kill_process $SS
}

restart() {
  stop
  start
}

Y="\033[0;32mo\033[0m"
N="\033[0;31mx\033[0m"

get_status() {
  local comm=$1
  local pid_file="$CACHE_DIR/$comm.pid"

  local status=$N

  if [[ -f $pid_file ]]; then
    local pid=`cat $pid_file`
    if [[ -n $pid  && `get_comm_by_pid $pid` = $comm ]]; then
      status=$Y
    fi
  fi

  echo $status
}

status() {
  local status=$N
  if [[ $OVER_KCPTUN = "1" ]]; then
    echo -e "over kcptun $Y"
    echo -e "$KCPTUN `get_status $KCPTUN`"
  fi
  echo -e "$SS `get_status $SS`"
}

case "$1" in
  start)
    shift
    start "$@"
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
esac

